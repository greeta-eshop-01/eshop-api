server:
  shutdown: graceful
  forward-headers-strategy: framework
  tomcat:
    connection-timeout: 2s
    keep-alive-timeout: 15s
    threads:
      max: 50
      min-spare: 5

spring:
  application:
    name: analytics
  lifecycle:
    timeout-per-shutdown-phase: 15s

  # Kafka
  kafka:
    bootstrap-servers: ${app.kafka.broker.host}:${app.kafka.broker.port}
    producer:
      properties:
        spring.json.add.type.headers: false
    consumer:
      auto-offset-reset: earliest
      properties:
        isolation.level: read_committed
      topic:
        orders: orders
        orderCheckouts: order-checkouts
        productPriceChanges: product-price-changes
        paidOrders: paid-orders
        ordersWaitingForValidation: orders-waiting-for-validation
        orderStockConfirmed: order-stock-confirmed
        orderStockRejected: order-stock-rejected
        submittedOrders: submitted-orders
        shippedOrders: shipped-orders
        cancelledOrders: cancelled-orders
        gracePeriodConfirmed: grace-period-confirmed
        paymentStatus: payment-status
        stockConfirmed: stock-confirmed

  keycloak:
    server-url: http://localhost:8080
    server-external-url: http://localhost:8080
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${spring.keycloak.server-external-url}/realms/eshop-realm
          jwk-set-uri: ${spring.keycloak.server-url}/realms/eshop-realm/protocol/openid-connect/certs

  cloud:
    function:
      definition: ordercheckouts;orderstatistics;allsubmittedorders;allpaidorders;payments
    stream:
      kafka.streams:
        binder.functions:
          ordercheckouts:
            applicationId: analytics-order-checkout
          orderstatistics:
            applicationId: analytics-order-statistics
          allsubmittedorders:
            applicationId: analytics-all-submitted-orders-statistics
          allpaidorders:
            applicationId: analytics-paid-orders-statistics
          payments:
            applicationId: analytics-payments-statistics

      bindings:
        ordercheckouts-in-0:
          destination: ${spring.kafka.consumer.topic.orderCheckouts}
          binder: defaultKafka
        orderstatistics-in-0:
          destination: ${spring.kafka.consumer.topic.submittedOrders}
          binder: defaultKafka
        orderstatistics-in-1:
          destination: ${spring.kafka.consumer.topic.cancelledOrders}
          binder: defaultKafka
        allsubmittedorders-in-0:
          destination: ${spring.kafka.consumer.topic.submittedOrders}
          binder: defaultKafka
        allsubmittedorders-out-0:
          destination: allsubmittedorders
          binder: defaultKafka
        allpaidorders-in-0:
          destination: ${spring.kafka.consumer.topic.paidOrders}
          binder: defaultKafka
        allpaidorders-in-1:
          destination: allsubmittedorders
          binder: defaultKafkaTable
        allpaidorders-out-0:
          destination: allpaidorders
          binder: defaultKafka
        payments-in-0:
          destination: ${spring.kafka.consumer.topic.paymentStatus}
          binder: defaultKafka

      binders:
        defaultKafka:
          type: kstream
          environment:
            spring.cloud.stream.kafka.streams:
              binder:
                brokers: ${app.kafka.broker.host}:${app.kafka.broker.port}
                configuration:
                  application.server: ${app.host}:${server.port}
                  default.key.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
                  default.value.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
                  commit.interval.ms: 1000

        defaultKafkaTable:
          type: ktable
          environment:
            spring.cloud.stream.kafka.streams:
              binder:
                brokers: ${app.kafka.broker.host}:${app.kafka.broker.port}
                configuration:
                  application.server: ${app.host}:${server.port}
                  default.key.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
                  default.value.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
                  commit.interval.ms: 1000

logging:
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"
    console: "%d{yyyy-MM-dd HH:mm:ss} ${LOG_LEVEL_PATTERN:-%5p} %m%n"
  level:
    net.greeta.eshop: DEBUG
    org.springframework.cloud.kubernetes: TRACE
    org.springframework.security: DEBUG
    org.springframework.web: INFO
    web: INFO
    root: INFO

info:
  system: Analytics Service

jwt:
  auth:
    converter:
      resource-id: eshop-app
      principal-attribute: preferred_username

management:
  endpoints:
    web:
      exposure:
        include: bindings, configprops, env, flyway, functions, health, heapdump, info, loggers, mappings, prometheus
  endpoint:
    health:
      show-details: always
      show-components: always
      probes:
        enabled: true
  tracing:
    sampling:
      probability: 1.0
  zipkin:
    tracing:
      endpoint: http://${ZIPKIN_HOST:localhost}:${ZIPKIN_PORT:9411}/api/v2/spans
  info:
    env:
      enabled: true
    java:
      enabled: true
    os:
      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}


openapi:
  oauthflow:
    authServerUrl: ${spring.keycloak.server-external-url}
    realm: eshop-realm

app:
  host: analytics
  kafka:
    broker:
      host: kafka
      port: 29092
