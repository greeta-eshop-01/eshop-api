# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
}

"An object with a Globally Unique ID."
interface Node {
  "ID of the object."
  id: ID!
}

"Return type for addRating mutation."
type AddRatingPayload {
  rating: Rating!
}

"Return type for addToBasket mutation."
type AddToBasketPayload {
  basket: Basket
}

"""

A shopping basket holds products and can be ordered.
Each basket belongs to a registered user.
"""
type Basket implements Node {
  "ID of the basket."
  id: ID!
  "List of line items in the basket."
  lineItems(sort: LineItemSort = PRICE): [LineItem]
  "The sum of the line items quantities."
  lineItemsQuantity: Int!
  "Total price. Sum of all line items prices."
  totalPrice: Float!
  "The owner of the basket."
  user: User!
}

"Return type for addQuantity mutation."
type BasketAddQuantityPayload {
  basket: Basket
}

"Return type for checkout mutation."
type BasketCheckoutPayload {
  orderNumber: String
}

"Return type for removeQuantity mutation."
type BasketRemoveQuantityPayload {
  basket: Basket
}

"Product's brand."
type Brand implements Node {
  "ID of the brand"
  id: ID!
  "The brand's name"
  name: String!
}

"Product's category."
type Category implements Node {
  "ID of the category"
  id: ID!
  "The category's name"
  name: String!
}

"Represents a single line item."
type LineItem implements Node {
  "ID of the line item."
  id: ID!
  "Image name."
  image: String!
  "Name of the product."
  name: String!
  "Total price. This value is based on the unit price of the product * quantity."
  price: Float!
  "Product object associated with this line item."
  product: Product
  "Number of product units ordered."
  quantity: Int!
  "Unit price."
  unitPrice: Float!
}

"E-Shop signed-in user."
type Me {
  "The user's basket."
  basket: Basket
  "The user's orders."
  orders(reverse: Boolean = false, sort: OrderSort = DATE): [Order]
  "The logged in user"
  user: User!
}

"The mutation root of the GraphQL interface."
type Mutation {
  addQuantity(input: BasketAddQuantityInput!): BasketAddQuantityPayload
  addRating(input: AddRatingInput!): AddRatingPayload
  addToBasket(input: AddToBasketInput!): AddToBasketPayload
  checkout(input: BasketCheckoutInput!): BasketCheckoutPayload
  removeQuantity(input: BasketRemoveQuantityInput!): BasketRemoveQuantityPayload
}

"An order is a customer's request to purchase products from the shop."
type Order implements Node {
  "Whether inventory has been reserved for the order."
  confirmed: Boolean!
  "Date and time when the order was created."
  date: DateTime!
  "ID of the order."
  id: ID!
  "List of line items in the order."
  lineItems(sort: LineItemSort = PRICE): [LineItem!]!
  "The sum of the line items quantities."
  lineItemsQuantity: Int!
  "Unique identifier for the order."
  orderNumber: String!
  "Whether the order has been paid in full."
  paid: Boolean!
  "The status of the order."
  status: OrderStatus!
  "The total price of the order."
  totalPrice: Float!
  "The user that placed the order."
  user: User!
}

"""

The product resource represents a product that is available in the shop.
The user can add a product in his basket.
"""
type Product implements Node {
  "Quantity of available items."
  availableQuantity: Int!
  "Product brand"
  brand: Brand!
  "Product category"
  category: Category!
  "Description of the product."
  description: String
  "ID of the product."
  id: ID!
  "Image name."
  image: String!
  "Name of the product."
  name: String!
  "Price of the product"
  price: Float!
  "Product rating"
  rating: Rating
}

type ProductsQueryResult {
  page: Int!
  pageSize: Int!
  result: [Product]
  total: Int!
}

"The query root of the GraphQL interface."
type Query {
  _service: _Service
  "Returns a basket by id."
  basket(id: ID!): Basket
  "Returns a brand by ID."
  brand(id: ID!): Brand
  "Returns a list of all brands."
  brands: [Brand]
  "Returns a list of all categories."
  categories: [Category]
  "Returns a category by ID."
  category(id: ID!): Category
  "Returns a brand by ID."
  lineItem(id: ID!): LineItem
  "Returns the current user."
  me: Me!
  "Returns a specific node (any object that implements the Node interface) by ID"
  node(id: ID!): Node
  "Returns an order by ID."
  order(id: ID!): Order
  "Returns a list of orders placed."
  orders(reverse: Boolean = false, sort: OrderSort = DATE): [Order]
  "Returns a product by ID."
  product(id: ID!): Product
  "Returns a list of products."
  products(filter: ProductFilter, page: Int = 0, pageSize: Int = 10, query: String, reverse: Boolean = false, sort: ProductSort = PRICE): ProductsQueryResult
}

"Product's rating."
type Rating {
  value: String
}

"E-Shop user."
type User {
  "The user's email"
  email: String!
  "The user's user name"
  userName: String!
}

type _Service {
  sdl: String!
}

enum ErrorDetail {
  """

  The deadline expired before the operation could complete.

  For operations that change the state of the system, this error
  may be returned even if the operation has completed successfully.
  For example, a successful response from a server could have been
  delayed long enough for the deadline to expire.

  HTTP Mapping: 504 Gateway Timeout
  Error Type: UNAVAILABLE
  """
  DEADLINE_EXCEEDED
  """

  The server detected that the client is exhibiting a behavior that
  might be generating excessive load.

  HTTP Mapping: 429 Too Many Requests or 420 Enhance Your Calm
  Error Type: UNAVAILABLE
  """
  ENHANCE_YOUR_CALM
  """

  The requested field is not found in the schema.

  This differs from `NOT_FOUND` in that `NOT_FOUND` should be used when a
  query is valid, but is unable to return a result (if, for example, a
  specific video id doesn't exist). `FIELD_NOT_FOUND` is intended to be
  returned by the server to signify that the requested field is not known to exist.
  This may be returned in lieu of failing the entire query.
  See also `PERMISSION_DENIED` for cases where the
  requested field is invalid only for the given user or class of users.

  HTTP Mapping: 404 Not Found
  Error Type: BAD_REQUEST
  """
  FIELD_NOT_FOUND
  """

  The client specified an invalid argument.

  Note that this differs from `FAILED_PRECONDITION`.
  `INVALID_ARGUMENT` indicates arguments that are problematic
  regardless of the state of the system (e.g., a malformed file name).

  HTTP Mapping: 400 Bad Request
  Error Type: BAD_REQUEST
  """
  INVALID_ARGUMENT
  """

  The provided cursor is not valid.

  The most common usage for this error is when a client is paginating
  through a list that uses stateful cursors. In that case, the provided
  cursor may be expired.

  HTTP Mapping: 404 Not Found
  Error Type: NOT_FOUND
  """
  INVALID_CURSOR
  """

  Unable to perform operation because a required resource is missing.

  Example: Client is attempting to refresh a list, but the specified
  list is expired. This requires an action by the client to get a new list.

  If the user is simply trying GET a resource that is not found,
  use the NOT_FOUND error type. FAILED_PRECONDITION.MISSING_RESOURCE
  is to be used particularly when the user is performing an operation
  that requires a particular resource to exist.

  HTTP Mapping: 400 Bad Request or 500 Internal Server Error
  Error Type: FAILED_PRECONDITION
  """
  MISSING_RESOURCE
  """

  Service Error.

  There is a problem with an upstream service.

  This may be returned if a gateway receives an unknown error from a service
  or if a service is unreachable.
  If a request times out which waiting on a response from a service,
  `DEADLINE_EXCEEDED` may be returned instead.
  If a service returns a more specific error Type, the specific error Type may
  be returned instead.

  HTTP Mapping: 502 Bad Gateway
  Error Type: UNAVAILABLE
  """
  SERVICE_ERROR
  """

  Request failed due to network errors.

  HTTP Mapping: 503 Unavailable
  Error Type: UNAVAILABLE
  """
  TCP_FAILURE
  """

  Request throttled based on server concurrency limits.

  HTTP Mapping: 503 Unavailable
  Error Type: UNAVAILABLE
  """
  THROTTLED_CONCURRENCY
  """

  Request throttled based on server CPU limits

  HTTP Mapping: 503 Unavailable.
  Error Type: UNAVAILABLE
  """
  THROTTLED_CPU
  """

  The operation is not implemented or is not currently supported/enabled.

  HTTP Mapping: 501 Not Implemented
  Error Type: BAD_REQUEST
  """
  UNIMPLEMENTED
  """

  Unknown error.

  This error should only be returned when no other error detail applies.
  If a client sees an unknown errorDetail, it will be interpreted as UNKNOWN.

  HTTP Mapping: 500 Internal Server Error
  """
  UNKNOWN
}

enum ErrorType {
  """

  Bad Request.

  There is a problem with the request.
  Retrying the same request is not likely to succeed.
  An example would be a query or argument that cannot be deserialized.

  HTTP Mapping: 400 Bad Request
  """
  BAD_REQUEST
  """

  The operation was rejected because the system is not in a state
  required for the operation's execution.  For example, the directory
  to be deleted is non-empty, an rmdir operation is applied to
  a non-directory, etc.

  Service implementers can use the following guidelines to decide
  between `FAILED_PRECONDITION` and `UNAVAILABLE`:

  - Use `UNAVAILABLE` if the client can retry just the failing call.
  - Use `FAILED_PRECONDITION` if the client should not retry until
  the system state has been explicitly fixed.  E.g., if an "rmdir"
  fails because the directory is non-empty, `FAILED_PRECONDITION`
  should be returned since the client should not retry unless
  the files are deleted from the directory.

  HTTP Mapping: 400 Bad Request or 500 Internal Server Error
  """
  FAILED_PRECONDITION
  """

  Internal error.

  An unexpected internal error was encountered. This means that some
  invariants expected by the underlying system have been broken.
  This error code is reserved for serious errors.

  HTTP Mapping: 500 Internal Server Error
  """
  INTERNAL
  """

  The requested entity was not found.

  This could apply to a resource that has never existed (e.g. bad resource id),
  or a resource that no longer exists (e.g. cache expired.)

  Note to server developers: if a request is denied for an entire class
  of users, such as gradual feature rollout or undocumented allowlist,
  `NOT_FOUND` may be used. If a request is denied for some users within
  a class of users, such as user-based access control, `PERMISSION_DENIED`
  must be used.

  HTTP Mapping: 404 Not Found
  """
  NOT_FOUND
  """

  The caller does not have permission to execute the specified
  operation.

  `PERMISSION_DENIED` must not be used for rejections
  caused by exhausting some resource or quota.
  `PERMISSION_DENIED` must not be used if the caller
  cannot be identified (use `UNAUTHENTICATED`
  instead for those errors).

  This error Type does not imply the
  request is valid or the requested entity exists or satisfies
  other pre-conditions.

  HTTP Mapping: 403 Forbidden
  """
  PERMISSION_DENIED
  """

  The request does not have valid authentication credentials.

  This is intended to be returned only for routes that require
  authentication.

  HTTP Mapping: 401 Unauthorized
  """
  UNAUTHENTICATED
  """

  Currently Unavailable.

  The service is currently unavailable.  This is most likely a
  transient condition, which can be corrected by retrying with
  a backoff.

  HTTP Mapping: 503 Unavailable
  """
  UNAVAILABLE
  """

  Unknown error.

  For example, this error may be returned when
  an error code received from another address space belongs to
  an error space that is not known in this address space.  Also
  errors raised by APIs that do not return enough error information
  may be converted to this error.

  If a client sees an unknown errorType, it will be interpreted as UNKNOWN.
  Unknown errors MUST NOT trigger any special behavior. These MAY be treated
  by an implementation as being equivalent to INTERNAL.

  When possible, a more specific error should be provided.

  HTTP Mapping: 520 Unknown Error
  """
  UNKNOWN
}

"The set of sort keys for the line items."
enum LineItemSort {
  "Sort by name."
  NAME
  "Sort by price."
  PRICE
}

"The set of sort keys for the order."
enum OrderSort {
  "Sort by date."
  DATE
  "Sort by price."
  PRICE
}

"Represents the current status of the order."
enum OrderStatus {
  AWAITING_VALIDATION
  CANCELLED
  PAID
  SHIPPED
  STOCK_CONFIRMED
  SUBMITTED
}

"The set of sort keys for the product."
enum ProductSort {
  "Sort by name."
  NAME
  "Sort by price."
  PRICE
}

"Input type for addRating mutation."
input AddRatingInput {
  productId: ID!
  value: String!
}

"Input type for addToBasket mutation."
input AddToBasketInput {
  basketId: ID!
  lineItemId: ID!
}

"Input type for addQuantity mutation."
input BasketAddQuantityInput {
  basketId: ID!
  lineItemId: ID!
}

"Input type for checkout mutation."
input BasketCheckoutInput {
  address: ShippingAddressInput!
  cardDetails: CardDetailsInput!
}

"Input type for removeQuantity mutation."
input BasketRemoveQuantityInput {
  basketId: ID!
  lineItemId: ID!
}

input CardDetailsInput {
  cardHolderName: String!
  expiration: Date!
  number: String!
  securityNumber: String!
  type: String!
}

"Filter properties for the product."
input ProductFilter {
  "Brand ID."
  brandId: String
  "Catalog ID."
  catalogId: String
}

"Input type for shipping address."
input ShippingAddressInput {
  city: String!
  country: String!
  state: String!
  street: String!
  zipCode: String!
}


"An RFC-3339 compliant Full Date Scalar"
scalar Date

"An RFC-3339 compliant DateTime Scalar"
scalar DateTime

scalar _FieldSet
